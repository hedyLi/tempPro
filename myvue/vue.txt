axios是什么？怎么使用？描述使用它实现登录功能的流程？

axios是基于promise用于浏览器和nodejs的一个http客户端，主要用于向后台发送请求的，还有就是在请求中做更多的操作，支持promise，还提供了一些并发的方法
axios实现的登录功能和一般的登录功能不同的是，它提供了拦截器
实现流程：
发起请求--》遇到了inteceptor(拦截器)，看看是否拦截这个操作，如果不拦截就下一步--》处理请求--》发送请求后(接收响应)--》inteceptor（拦截响应），判断是成功的回调还是失败的回调

--------------------------------------------------------------------------------------

vuex是什么？怎么使用？哪种功能场景使用它？

vuex就是一个状态集管理，早期的状态集管理就是解决父子组件通信的，在vue中它是以组件的形式封装的，只要有组件就肯定有组件之间的一个嵌套，那父子组件通信(数据传输)的话就是使用这个props这个来进行传输的。那现在问题来了，往往我们在a组件中会获取某些数据，b组件中也需要这个数据。那怎么办呢？那这样的话就可以使用vuex来进行处理。 用vuex来存放这些公共的数据，这就形成了一个集中式的状态集管理。用它来管理一些公共的数据。
使用vuex的时候就会说，利用了一个及其复杂的形式实现了一个简单的功能。那么为什么要这么做呢？主要是为了解耦a b组件甚至更多组件都要从这里获取数据，都会显得更加清晰，更加容易去管理。这种vuex的方式更加适合大项目，如果项目是比较小的话，使用这个状态集管理就会是代码量更加多。

为vue构建的一个状态集的管理，说白了就是一个仓库，状态就是数据。主要是为了解决组件间状态共享的一个问题。强调的是集中式管理，原本是组件与组件间的传递，变成了组件与仓库间的传递
vuex的核心
state（存放数据），mutation（变更状态,与actions并用），getters（计算状态，相当于组件中computed） ，actions（调用mutation去更改状态）， modules（拆分state仓库）

--------------------------------------------------------------------------------------

说出4个vue当中的指令和它的用法

v-if 条件渲染指令 代表存在和销毁
v-bind 绑定指令 用来绑定属性
v-on 监听指令 用来监听事件
v-for 循环指令

--------------------------------------------------------------------------------------

导航钩子有哪些？它们有哪些参数

导航钩子就是vue中路由的生命周期函数
主要分为两种，一种是全局式的，一种式局部式的
全局的钩子函数
beforeEach：所有路由切换时开始调用，路由守卫在这里触发 
提供的参数(to,from,next) to：即将进入的目标对象 from：当前导航要离开的导航对象 next：是一个函数，调用reslove 执行下一步
afterEach：在路由切换离开时调用

局部的钩子函数：有两种
局部到单个路由：beforeEnter
局部到组件的：beforeRouterEnter，beforeRouterUpdate，beforeRouterLeave
优先级： 组件>单个路由>全局

--------------------------------------------------------------------------------------

v-model是什么？vue中标签怎么绑定事件

vue中利用v-model来进行表单数据的双向绑定，它就是做了两件事，使用v-bind绑定了一个value的属性，然后再利用v-on把当前的元素绑定到一个事件上


--------------------------------------------------------------------------------------

vue生命周期详解
vue生命周期分为四个阶段
1、组件创建时（creating）2、模板渲染时（mounting） 3、数据更新时（updating） 4、组件卸载时（destorying）
每个阶段包含了两个生命周期函数
在创建vue实例的时候 他会进行一个初始化init，就开始了一个vue实例化的完整的生命周期。当你初始化之后会调用一个构造函数 beforeCreate，当我们触发这个函数的时候data还没被注入和响应，在这个时候去调用this.data中的信息的时候是没办法获取到的，所以在这个生命周期里面往往只做一些预处理的一些事件和功能。
当我们注入完了data这些之后就会调用created这个 生命周期，在这个时候就可以获取到data的信息。我们就可以在这个生命周期当中对data做一些预处理，在这个的时候组件还没被渲染处理，然后他会去判断你有没有el元素，如果有他就会判断有没有当前这个组件，然后去渲染这个组件，如果没有的话就获取$mount这个方法，进行挂载。如果有这个组件接下来就会调用beforeMount去渲染到html上（但是还没显示在浏览器上，所以这个时候还可以对data进行修改，还可以在显示出来之前进行一些变更），如果没有就会绑定外层的html充当这个模板。创建完元素以后就会调用mounted，这个时候页面就已经渲染到了浏览器上。mounted一般之后调用一次，到这为此初始化的生命周期就已经结束了。当我们页面中的data数据发送变更的时候会调用beforeUpdate，变更完了以后渲染到页面上然后再调用updated。当我们组件进行销毁的时候（路由进行切换），销毁前beforeDestory 销毁后destoryed


--------------------------------------------------------------------------------------

vue组件封装过程（怎么封装一个vue组件）

为什么要封装组件？主旨就是为了解耦
通用组件必须具备高性能低耦合的特性，往往我们还会再通用组件留一个插槽
组件中的data为什么必须是一个函数？主要是为了防止组件与组件之间声明的变量互相影响


--------------------------------------------------------------------------------------

swiper插件从后台获取数据没问题，css代码也没问题，但是图片不动，应该怎么解决？

主要原因时swiper提前初始化了，而这个时候数据还没有完全出来
解决办法：一个是从vue入手 一个是从swiper入手
1、vue中专门提供了一个方法 nextTick() 解决dom异步先后执行的问题
2、在swiper实例化的时候添加一个数据 observer:true,这个表示修改swiper自己或者子元素的话，他会初始化swiper，跟它对应的还有observerParents:true这个表示当前这个swiper包括当前swiper的父元素发送变更的时候会自动初始化


--------------------------------------------------------------------------------------

vue路由懒加载

延迟加载即在需要的时候加载
一个vue项目在使用webpack打包的时候 会将js代码全部打包到一个文件中，每进入到新页面都会去加载这涵盖了整个项目的js文件，这个时候页面加载的性能就会变差，如果用了vue的懒加载的话，会把不同的js打包在不同的js文件中，在需要的时候才会加载。

使用异步组件（在vue中 组件使用异步promise的形式来按需加载组件
webpack代码分离（在webpack.base.conf.js中 output 加一个属性 chunkFileName:'[name].js'）


--------------------------------------------------------------------------------------

vue-loader解释一下

在webpack中loader就是加载器，是webpack的一个核心，webpack离不开加载器，通过加载器帮助项目去进行一个编译，编译成浏览器可以识别的代码。
vue中的loader就是把vue的模板引擎(.vue文件)编译成js方便浏览器去浏览。否则浏览器是不识别.vue这个文件的。
好处：将html变成动态的，可以动态的渲染一些数据。 vue提供了三个标签template script style，这三个标签 vue都做了一定程度上的优化。template提供了虚拟dom，script可以写es5或者es6的语法，会自动进行转译。style可以直接使用sass或者less还提供了作用域的选择。


--------------------------------------------------------------------------------------

用过插槽么？用的是具名插槽还是匿名插槽？

vue中的插槽，所有的自定义组件肯定离不开插槽。vue的插槽是slot标签，说白了插槽就是一个占位
在vue当中插槽包含了 默认插槽（匿名插槽） 具名插槽 作用域插槽。插槽可以极大程度提高通用组件的复用率，比如说一个导航标签 有一个地方可能是一个图案也有可能是一个标题，甚至是空的，这个时候就需要用到插槽去占一个位置，需要的时候往里面填东西，不需要的话也不影响。

具名和匿名的区别？
匿名的就是没有名字、默认的，只要是这种情况的都填入到匿名插槽的位置。
具名的话就是具有名字的插槽，只要与slot中定义的name属性对应的东西才可以填入进去。


--------------------------------------------------------------------------------------

说说你对vue虚拟dom的理解

什么是虚拟dom？
使用js对象的方式去添加dom元素，本指上是优化了diff算法，它更适合批量修改dom。采用了新旧dom的对比，获取你差异的dom一次性更新到你真实的dom上


--------------------------------------------------------------------------------------

如何理解vue的mvvm模式

mvvm和mvc之间的区别？mvvm其实是mvc的一个衍生，
mvc（model view controller） 
1、用户输入信息 点击登录或者提交 --》2、将信息传给controller ，controller会做一些业务处理 
--》3.1、如果这些业务处理需要对后台进行请求的那就会去向model传递一些信息，然后model去操作数据库然后把信息渲染到view
--》3.2、如果没有的话就之间把这些信息反馈给用户（view）

mvvm（model view ViewModel）数据双向绑定，数据时刻反馈
vue就是专注于view和viewModel的框架


--------------------------------------------------------------------------------------

vue中keep-alive的作用

keep-alive是vue中内置的组件，它可以把vue中不活动的组件保存在内存中，而不是直接销毁它。
实现的原理：就是在created的时候 将需要缓存的vnode节点放到cache中，在render的时候根据name再进行取出。
提供了两个属性允许组件有条件的缓存
include
exclude





 







